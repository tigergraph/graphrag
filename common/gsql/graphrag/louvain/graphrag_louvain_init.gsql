CREATE OR REPLACE DISTRIBUTED QUERY graphrag_louvain_init(UINT max_hop = 10, UINT n_batches = 1) {
    /*
     * Initialize GraphRAG's hierarchical communities.
     */
    TYPEDEF TUPLE <DOUBLE delta_q, VERTEX<ResolvedEntity> community, STRING ext_vid> Move;
    SumAccum<DOUBLE> @@m; // the sum of the weights of all the links in the network
    MinAccum<VERTEX<ResolvedEntity>> @community_id; // the community ID of the node
    MinAccum<STRING> @community_vid; // the community ID of the node
    SumAccum<DOUBLE> @k; // the sum of the weights of the links incident to the node
    SumAccum<DOUBLE> @k_in; // the sum of the weights of the links inside the previous community of the node
    SumAccum<DOUBLE> @k_self_loop; // the weight of the self-loop link
    MapAccum<VERTEX<ResolvedEntity>, SumAccum<DOUBLE>> @community_k_in_map; // the community of the neighbors of the nodes -> the sum of the weights of the links inside the community
    MapAccum<VERTEX<ResolvedEntity>, SumAccum<DOUBLE>> @@community_sum_total_map; // community ID C -> the sum of the weights of the links incident to nodes in C
    SumAccum<DOUBLE> @community_sum_total; // the sum of the weights of the links incident to nodes in the community of the node
    MapAccum<VERTEX<ResolvedEntity>, SumAccum<DOUBLE>> @@community_sum_in_map; // community ID -> the sum of the weights of the links inside the community
    MapAccum<STRING, MapAccum<STRING, SumAccum<DOUBLE>>> @@source_target_k_in_map; // source community ID -> (target community ID -> the sum of the weights of the links from the source community to the target community)
    SumAccum<DOUBLE> @delta_Q_remove; // delta Q to remove the node from the previous community
    MaxAccum<Move> @best_move; // best move of the node with the highest delta Q to move the isolated node into the new community
    MaxAccum<DOUBLE> @@min_double; // used to reset the @best_move
    SumAccum<INT> @@move_cnt;
    OrAccum @to_change_community, @has_relations;
    SumAccum<INT> @batch_id;
    MinAccum<INT> @vid;

    AllNodes = {ResolvedEntity.*};
    DOUBLE wt = 1.0;

    // prevent multiple init runs
    z = SELECT s FROM AllNodes:s -(_)-> Community:t;
    IF z.size() > 0 THEN
        EXCEPTION reinit(400001);
        RAISE reinit("ERROR: the hierarchical communities have already been initialized");
    END;

    // init
    z = SELECT s FROM AllNodes:s 
        ACCUM 
            s.@community_id = s, // assign node to its own community
            s.@community_vid = s.id, // external id
            s.@vid = getvid(s), // internal id (used in batching)
            s.@batch_id = s.@vid % n_batches; // get batch number
    z = SELECT s FROM AllNodes:s -(_)-> ResolvedEntity:t
        ACCUM s.@k += wt,
              @@m += 1;

    PRINT z.size();
    PRINT z;
    
    // Local moving
    INT hop = 0;
    Candidates = AllNodes;
    WHILE Candidates.size() > 0 AND hop < max_hop DO
        hop += 1; 
        IF hop == 1 THEN // first iteration
            ChangedNodes = SELECT s FROM Candidates:s -(_:e)-> ResolvedEntity:t
                           WHERE s.@community_id != t.@community_id // can't move within the same community
                           ACCUM 
                               DOUBLE dq = 1 - s.@k * t.@k / (2 * @@m),
                               s.@best_move += Move(dq, t.@community_id, t.@community_vid) // find the best move
                           POST-ACCUM
                               IF s.@best_move.delta_q > 0 THEN // if the move increases dq
                                  s.@to_change_community += TRUE
                               END
                           HAVING s.@to_change_community == TRUE; // only select nodes that will move
            PRINT ChangedNodes.size();
        ELSE // other iterations
            // Calculate sum_total of links in each community
            Tmp = SELECT s FROM AllNodes:s
                  POST-ACCUM
                      @@community_sum_total_map += (s.@community_id -> s.@k);
            // store community's total edges in each vert (easier access)
            Tmp = SELECT s FROM AllNodes:s
                  POST-ACCUM
                      s.@community_sum_total = @@community_sum_total_map.get(s.@community_id);
            @@community_sum_total_map.clear();

            // find the best move
            ChangedNodes = {};

            // process nodes in batch
            FOREACH batch_id IN RANGE[0, n_batches-1] DO
                Nodes = SELECT s FROM Candidates:s -(_:e)-> ResolvedEntity:t
                        WHERE s.@batch_id == batch_id
                        ACCUM
                            IF s.@community_id == t.@community_id THEN 
                                // add edge weights connected to s
                                s.@k_in += wt
                            ELSE
                                // add edge weights connecetd to t
                                s.@community_k_in_map += (t.@community_id -> wt)
                            END
                        POST-ACCUM
                            // ∆Q if s is moved out of its current community
                            s.@delta_Q_remove = 2 * s.@k_self_loop - 2 * s.@k_in + s.@k * (s.@community_sum_total - s.@k) / @@m,
                            s.@k_in = 0,
                            s.@best_move = Move(@@min_double, s, to_string(s.id)); // reset best move

                // find the best move
                Nodes = SELECT s FROM Nodes:s -(_:e)-> ResolvedEntity:t
                        WHERE s.@community_id != t.@community_id
                        ACCUM 
                            DOUBLE dq = 2 * s.@community_k_in_map.get(t.@community_id) - s.@k * t.@community_sum_total / @@m,
                            s.@best_move += Move(dq, t.@community_id, t.@community_vid) // find the best move
                        POST-ACCUM
                            IF s.@delta_Q_remove + s.@best_move.delta_q > 0 THEN // if the move increases dq
                                s.@to_change_community = TRUE// s should move
                            END,
                            s.@community_k_in_map.clear()
                            HAVING s.@to_change_community == TRUE; // only select nodes that will move

                // Add nodes that will move to ChangedNodes
                ChangedNodes = ChangedNodes UNION Nodes;
            END;
        END;
        // If two nodes swap, only change the community of one of them
        SwapNodes = SELECT s FROM ChangedNodes:s -(_:e)-> ResolvedEntity:t
                    WHERE s.@best_move.community == t.@community_id
                      AND t.@to_change_community
                      AND t.@best_move.community == s.@community_id
                      // if delta Q are the same, only change the one with larger delta Q or the one with smaller @vid 
                      AND (
                        s.@delta_Q_remove + s.@best_move.delta_q < t.@delta_Q_remove + t.@best_move.delta_q
                        OR (
                          abs(
                            (s.@delta_Q_remove + s.@best_move.delta_q) 
                            - (t.@delta_Q_remove + t.@best_move.delta_q)
                          ) < 0.00000000001
                          AND s.@vid > t.@vid
                        )
                      )
                    POST-ACCUM
                        s.@to_change_community = FALSE;
            
        // remove SwapNodes (don't need to be changed)
        ChangedNodes = ChangedNodes MINUS SwapNodes;

        // Update node communities (based on max ∆Q)
        SwapNodes = SELECT s FROM ChangedNodes:s
                    POST-ACCUM
                        s.@community_id = s.@best_move.community, // move the node
                        s.@community_vid = s.@best_move.ext_vid,  // move the node (external v_id update)
                        s.@to_change_community = FALSE;
        @@move_cnt += ChangedNodes.size();

        // Get all neighbours of the changed node that do not belong to the node’s new community
        Candidates = SELECT t FROM ChangedNodes:s -(_:e)-> ResolvedEntity:t
                     WHERE t.@community_id != s.@community_id;
    END;

    // Coarsening
    UINT new_layer = 0;
    @@community_sum_total_map.clear();
    Tmp = SELECT s FROM AllNodes:s -(_:e)-> ResolvedEntity:t
          ACCUM
              s.@has_relations += TRUE,
              t.@has_relations += TRUE,
              IF s.@community_id == t.@community_id THEN
                  // keep track of how many edges are within the community
                  @@community_sum_in_map += (s.@community_id -> wt) 
              ELSE
                  // get LINKS_TO edge weights (how many edges are between communities)
                  @@source_target_k_in_map += (s.@community_vid -> (t.@community_vid -> 1))
              END
          POST-ACCUM
              //                              ID                      , iter, edges within the community
              INSERT INTO Community VALUES (s.@community_vid+"_1", 1, ""),
              INSERT INTO IN_COMMUNITY VALUES (s, s.@community_vid+"_1") // link entity to it's first community
          ;  

    // Continue community hierarchy for unattached partitions
    Tmp = SELECT s FROM AllNodes:s
          WHERE NOT s.@has_relations
          POST-ACCUM
              // if s is a part of an unattached partition, add to its community hierarchy to maintain parity with rest of graph
              INSERT INTO Community VALUES (s.id+"_1", 1, ""),
              INSERT INTO IN_COMMUNITY VALUES (s, s.id+"_1"); // link entity to it's first community
        

    @@community_sum_total_map.clear();
    // link communities
    Tmp = SELECT s FROM AllNodes:s -(_:e)-> ResolvedEntity:t
          WHERE s.@community_vid != t.@community_vid
          ACCUM
              DOUBLE w = @@source_target_k_in_map.get(s.@community_vid).get(t.@community_vid),
              INSERT INTO LINKS_TO VALUES (s.@community_vid+"_1", t.@community_vid+"_1", w);


    PRINT @@source_target_k_in_map;
}
