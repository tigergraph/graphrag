CREATE OR REPLACE DISTRIBUTED QUERY GraphRAG_Community_Vector_Search(LIST<FLOAT> query_vector, INT community_level=2, INT top_k = 3, BOOL with_chunk = true, BOOL verbose = false) { 
  MapAccum<Vertex, SetAccum<String>> @@final_retrieval;
  MapAccum<STRING, SetAccum<Vertex>> @@verbose_info;
  SetAccum<STRING> @context;
  SetAccum<Vertex> @children;
  SetAccum<Vertex> @@start_set;
  
  filtered_comms = SELECT c FROM Community:c WHERE c.iteration == community_level and length(c.description) > 0;
  start_comms = vectorSearch({Community.embedding}, query_vector, top_k, {candidate_set: filtered_comms});

  start_comms = SELECT c FROM start_comms:c WHERE c.type == "Community"
      POST-ACCUM @@start_set += c;

  @@verbose_info += ("start_set" -> @@start_set);

  selected_comms = start_comms;
  IF with_chunk THEN
      FOREACH i IN RANGE[community_level, 2].STEP(-1) DO
          selected_comms = SELECT c FROM selected_comms:s -(<HAS_PARENT)- Community:c
              WHERE s.iteration == i
              ACCUM s.@children += c
              POST-ACCUM @@verbose_info += ("community_level_"+to_string(i-1) -> s.@children);
      END;
      related_chunks = SELECT c FROM Content:c -(<HAS_CONTENT)- DocumentChunk:d -(CONTAINS_ENTITY>)- Entity:v -(RESOLVES_TO>)- ResolvedEntity:r -(IN_COMMUNITY>)- selected_comms:m
          ACCUM m.@context += c.text, m.@children += d
          POST-ACCUM @@verbose_info += ("related_chunks" -> m.@children);
  END;

  selected_comms = SELECT c FROM selected_comms:c -(HAS_PARENT>*0..)- start_comms:s WHERE s.type == c.type and c.type == "Community"
      ACCUM s.@context += s.description, s.@context += c.@context
      POST-ACCUM(s) @@final_retrieval += (s -> s.@context);

  PRINT @@final_retrieval as final_retrieval;

  IF verbose THEN
      PRINT @@verbose_info as verbose;
  END;
}
